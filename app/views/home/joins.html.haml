%h1 Joins
%p
  Squeel simplifies queries that involve multiple tables. It uses "key paths" to join together the
  table objects with a dot notation, rather than the cumbersome hash syntax of Active Record

%p
  For example, if we want to find all people who's pet has a toy that costs less than a dollar:

%pre
  :plain
    # ActiveRecord
    Person.joins( :pets => :toys ).where( "toys.price < ?", 1).to_sql
    # Squeel
    Person.joins{ pets.toys }.where{ toys.price < 1 }.to_sql

%p
  Next, crawling even deeper into the relationships, such as "find people shop at X for pet toys"
%pre
  :plain
    # ActiveRecord
    Person.joins( :pets => { :toys => :store }).where( "stores.name = ?", "Amazon").to_sql
    # Squeel
    Person.joins{ pets.toys.store}.where{ pets.toys.store.name == "Amazon"}.to_sql

%p
  A few things to notice:
%ul
  %li It gets hard to read ActiveRecord for deeper relations
  %li
    ActiveRecord creates a mismatch in identifiers. Since the "where" clauses uses a SQL fragment,
    the name of "stores" doesn't match the "store" that was declared in the join.
  %li Squeel stays consistent

%p
  Finally, Squeel can handle when a model object is used more than once.
  In this example, "find people who buy their pets in MN and their toys at Amazon"

%pre
  :plain
    Person.joins{ pets.toys.store}.joins{pets.store}.where{ (pets.toys.store.name == 'Amazon') & (pets.store.state == 'MN')   }.to_sql
    # => SELECT `people`.* FROM `people`
    #    INNER JOIN `pets` ON `pets`.`person_id` = `people`.`id`
    #    INNER JOIN `toys` ON `toys`.`pet_id` = `pets`.`id`
    #    INNER JOIN `stores` ON `stores`.`id` = `toys`.`store_id`
    #    INNER JOIN `stores` `stores_pets` ON `stores_pets`.`id` = `pets`.`store_id`
    #    WHERE ((`stores`.`name` = 'Amazon' AND `stores_pets`.`state` = 'MN'))
%p
  Notice how the aliases given to the two uses of the "stores" table are properly referenced.
  That won't happen in ActiveRecord's native use, where you'll be left trying to hardcode that dynamic
  name it gets during the join (and then debugging it later whenever you need to tweak the query).



%h2
  Next:
  = link_to "Advanced Features", "advanced"