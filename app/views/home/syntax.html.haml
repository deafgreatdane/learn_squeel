%h1 Basic Syntax
%p
  Squeel works by creating a DSL (Domain Specific Language) on top of the traditional ActiveRecord methods.
  This has some implications that changes how we code queries.
%h2 Methods vs Blocks
%p
  We're used to calling the ActiveRecord
  %i methods
  by using parenthesis. Squeel instead uses
  %i blocks,
  denoted with curly braces. For example,
%pre
  \# ActiveRecord
  Person.where( :first_name => 'Alice' ).to_sql
  \# Squeel
  Person.where{ first_name == 'Alice' }.to_sql

%h2 Symbols vs Stubs
%p
  When invoking ActiveRecord's methods, the convention is to use symbols to denote database objects like
  table and column names.
  In Squeel, the database objects are part of the DSL, so don't delimit them with anything. The Squeel
  documentation calls these "stubs."

%h2 Hashes/Arrays vs Statements
%p
  ActiveRecord methods take a flexible configuration of hashes and arrays, depending on what you're
  try to achieve. Squeel creates more intuitive approach, allowing you to build a complex statements
  more logically.

%pre
  \# ActiveRecord multiple args using an array of values
  Person.where( "first_name = ? and state = ?", 'Alice','MN' ).to_sql
  \# ActiveRecord multiple args using a hash
  Person.where( :first_name =>'Alice', state =>'MN' ).to_sql
  \# Squeel, notice the lack of ruby delimiters like commas and colons
  Person.where{ ( first_name == 'Alice' ) & ( state == 'MN' ) }.to_sql

%h2 Mix and Match
Because both Squeel and ActiveRecord are built on top of ARel, you can mix and match. Get the power
where you need it!

%pre
  \# a traditional join with squeel for the where
  Person.joins( :pets ).where{ state == 'MN' }.to_sql
  \# the reverse
  Person.joins{ pets }.where( state => 'MN' ).to_sql

%h2
  Next:
  = link_to "Understanding Scope", "scope"